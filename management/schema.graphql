type Query {
  # Returns a slice of the stream.
  read(
    # The name of the stream to read. (eq: "order-123")
    name: String!, 
    # The earliest message to read (inclusive).
    from: Int!,
    # The maximum number of messages to read. The actual slice might 
    # be smaller than this count.
    maxCount: Int, 
    # The direction to read. If omitted the direction is FORWARD.
    direction: Direction): Slice
}

enum Direction{
  FORWARD
  BACKWARD
}

type AppendResult{
  # The position of the first message appended to the stream.
  from: Int!
  count: Int!
  head: Int!
}

type Mutation {
  append(id: String!, messages: [MessageInput!]!): AppendResult
}

type Slice {
  stream: String!
  from: Int!
  count: Int!
  messages: [Message!]
  direction: Direction!
}

input MessageInput{
  header: String
  value: String
}

type Message{
  streamId: String!
  header: String!
  value: String!
}

